import Category from "../models/categories.js";

// üü¢ L·∫•y t·∫•t c·∫£ danh m·ª•c
export const getAllCategories = async (req, res) => {
  try {
    const categories = await Category.find().populate("parent_id", "name slug");
    res.status(200).json(categories);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// üîµ L·∫•y danh m·ª•c theo ID
export const getCategoryById = async (req, res) => {
  try {
    const category = await Category.findById(req.params.id).populate("parent_id", "name slug");
    if (!category) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c" });
    res.status(200).json(category);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// üü† T·∫°o danh m·ª•c m·ªõi
export const createCategory = async (req, res) => {
  try {
    const { name, slug } = req.body;

    // Ki·ªÉm tra tr√πng slug
    const existing = await Category.findOne({ slug });
    if (existing) return res.status(400).json({ message: "Slug ƒë√£ t·ªìn t·∫°i" });

    const newCategory = new Category(req.body);
    await newCategory.save();

    res.status(201).json({ message: "T·∫°o danh m·ª•c th√†nh c√¥ng", category: newCategory });
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// üü£ C·∫≠p nh·∫≠t danh m·ª•c
export const updateCategory = async (req, res) => {
  try {
    const updated = await Category.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!updated) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c" });
    res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", category: updated });
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// üî¥ X√≥a danh m·ª•c
export const deleteCategory = async (req, res) => {
  try {
    const deleted = await Category.findByIdAndDelete(req.params.id);
    if (!deleted) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c" });
    res.status(200).json({ message: "X√≥a danh m·ª•c th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};
