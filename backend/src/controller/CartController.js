import CartItem from "../models/Cart.js";
import product from "../models/product.js";
import "../models/ProductVariant.js"
import mongoose from "mongoose";
// üìå Th√™m s·∫£n ph·∫©m v√†o gi·ªè
export const addToCart = async (req, res) => {
  try {
    const userId = req.user.id; // t·ª´ verifyToken
    const { product_id, product_variant_id, quantity } = req.body;

    // Ki·ªÉm tra product_id h·ª£p l·ªá
    if (!mongoose.Types.ObjectId.isValid(product_id)) {
      return res.status(400).json({ message: "s·∫£n ph·∫©m ko h·ª£p l·ªá " });
    }

    // Ki·ªÉm tra product_variant_id n·∫øu c√≥
    let variantId = null;
    if (product_variant_id) {
      if (!mongoose.Types.ObjectId.isValid(product_variant_id)) {
        return res.status(400).json({ message: "product_variant_id kh√¥ng h·ª£p l·ªá" });
      }
      variantId = product_variant_id;
    }

    // Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè ch∆∞a
    let cartItem = await CartItem.findOne({
      user_id: userId,
      product_id,
      product_variant_id: variantId
    });

    if (cartItem) {
      // N·∫øu ƒë√£ c√≥, tƒÉng s·ªë l∆∞·ª£ng
      cartItem.quantity += quantity;
      await cartItem.save();
    } else {
      // N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi
      cartItem = new CartItem({
        user_id: userId,
        product_id,
        product_variant_id: variantId,
        quantity
      });
      await cartItem.save();
    }

    res.status(200).json({ message: "Th√™m s·∫£n ph·∫©m v√†o gi·ªè th√†nh c√¥ng", cartItem });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

// üìå L·∫•y gi·ªè h√†ng
export const getCart = async (req, res) => {
  try {
    const user_id = req.user.id;
    const items = await CartItem.find({ user_id })
      .populate("product_id")
      .populate("product_variant_id");
    res.json(items);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói khi l·∫•y gi·ªè h√†ng" });
  }
};

// üìå C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
export const updateCartItem = async (req, res) => {
  try {
    const { id } = req.params;
    const { quantity } = req.body;

    const item = await CartItem.findById(id);
    if (!item) return res.status(404).json({ message: "Item kh√¥ng t·ªìn t·∫°i" });

    item.quantity = quantity;
    item.updated_at = new Date();
    await item.save();

    res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", cartItem: item });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng" });
  }
};

// üìå X√≥a s·∫£n ph·∫©m
export const removeCartItem = async (req, res) => {
  try {
    const { id } = req.params;
    await CartItem.findByIdAndDelete(id);
    res.json({ message: "X√≥a th√†nh c√¥ng" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói khi x√≥a s·∫£n ph·∫©m" });
  }
};

// üìå X√≥a to√†n b·ªô gi·ªè h√†ng c·ªßa user
export const clearCart = async (req, res) => {
  try {
    const user_id = req.user.id;
    await CartItem.deleteMany({ user_id });
    res.json({ message: "X√≥a to√†n b·ªô gi·ªè h√†ng th√†nh c√¥ng" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói khi x√≥a gi·ªè h√†ng" });
  }
};
